import databaseManager as dbm
import design as dn

from pathlib import Path

import logging

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

logging.basicConfig(

    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO

)

logging.getLogger("httpx").setLevel(logging.WARNING)


logger = logging.getLogger(__name__)

# REGISTERING FORM --------------------------------------------------------------------------------

START,ENTERING_NAME, ENTER_GENDER, ENTERING_BIO, ENTERING_PHOTO = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if (update.message.from_user.username == None):
        await update.message.reply_text(
        "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—è–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è."
    )
        return START
    
    if dbm.check_user(update.message.from_user.username):
        await update.message.reply_text(
        "–¢–µ–±—è –µ—â–µ –Ω–µ –ø–æ–∏–º–µ–ª –®–ø—ç–∫?! –í—Ä–µ–º—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å"
    )
        await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
    )
        return ENTERING_NAME
    else:
        await main_menu(update, context)
        return ConversationHandler.END

async def entering_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if len(update.message.text) > 20:
        await update.message.reply_text("–Ø –∫–æ–Ω–µ—á–Ω–æ –Ω–µ –æ—Å—É–∂–¥–∞—é —Ç–≤–æ–µ –∏–º—è, –Ω–æ —á–µ—Ç –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ, –ª–∏–º–∏—Ç 20 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        return ENTERING_NAME
    dbm.add_user(update.message.text,"",update.message.from_user.username,"")
    reply_keyboard = [["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]]
    await update.message.reply_text("–î–∞–π –∑–Ω–∞—Ç—å —à–ø—ç–∫—É –∫—Ç–æ —Ç—ã", reply_markup=ReplyKeyboardMarkup(reply_keyboard,one_time_keyboard=True,input_field_placeholder="–ú—É–∂—á–∏–Ω–∞ –∏–ª–∏ –ñ–µ–Ω—â–∏–Ω–∞?"))
    return ENTER_GENDER

async def entering_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if (update.message.text == "–ú—É–∂—á–∏–Ω–∞"):
        dbm.update_gender(update.message.from_user.username,'M')
    if (update.message.text == "–ñ–µ–Ω—â–∏–Ω–∞"):
        dbm.update_gender(update.message.from_user.username,'F')
    await update.message.reply_text("–†–∞—Å–∫–∞–∂–∏ —á—Ç–æ –Ω–∏–±—É–¥—å –æ —Å–µ–±–µ –®–ø—ç–∫—É")
    return ENTERING_BIO

async def entering_bio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if len(update.message.text) > 100:
        await update.message.reply_text("–í–Ω—É—à–∏—Ç–µ–ª—å–Ω–æ, –æ–¥–Ω–∞–∫–æ –¥–∞–≤–∞–π —É–ª–æ–∂–∏–º—Å—è –≤ 100 —Å–∏–º–≤–æ–ª–æ–≤")
        return ENTERING_BIO
    dbm.update_bio(update.message.from_user.username,update.message.text)
    await update.message.reply_text("–°–∫–∏–¥—ã–≤–∞–π —Å–≤–æ—é —Ñ–æ—Ç–æ—á–∫—É, –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –º–æ–∂–Ω–æ /cancel –ø—Ä–æ–ø–∏—Å–∞—Ç—å")
    return ENTERING_PHOTO

async def entering_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    file = await update.message.photo[len(update.message.photo)-1].get_file()
    await file.download_to_drive("./photos/{}.jpg".format(update.message.from_user.username))
    await main_menu(update,context)
    return ConversationHandler.END

# update.message.reply_photo("./photos/{}.jpg".format(update.message.from_user.username), "–£–∑–Ω–∞–ª —Å–µ–±—è?")
# MAIN MENU --------------------------------------------------------------------------------

SEARCH, INTERESTED, CHANGE = range(3)

async def send_profile(update:Update, context: ContextTypes.DEFAULT_TYPE, name, bio, current_user_id,reply_keyboard):
    current_user_name = dbm.get_tg_id_by_id(current_user_id)
    if Path("./photos/{}.jpg".format(current_user_name)).is_file():
        await update.message.reply_photo("./photos/{}.jpg".format(current_user_name), dn.formated_profile(name, bio),
                                reply_markup=ReplyKeyboardMarkup(reply_keyboard,one_time_keyboard=True))
    else:
        await update.message.reply_text(dn.formated_profile(name, bio),
                                reply_markup=ReplyKeyboardMarkup(reply_keyboard,one_time_keyboard=True))
    
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name_of_state="–ß–µ–ª–æ–≤–µ–∫"
    if dbm.get_interested_in_gender_by_tg_id(update.message.from_user.username) == "M":
        name_of_state="–º—É–∂—á–∏–Ω—ã"
    elif dbm.get_interested_in_gender_by_tg_id(update.message.from_user.username) == "F":
        name_of_state="–∂–µ–Ω—â–∏–Ω—ã"
    elif dbm.get_interested_in_gender_by_tg_id(update.message.from_user.username) == "A":
        name_of_state="–≤—Å–µ –∂–∏–≤–æ–µ"
    
    await update.message.reply_text("""–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω—Ü–∏—é:
/search - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ª—é–¥–µ–π
—Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ - {}
/interested - —Ç–∞–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è {} —á–µ–ª–æ–≤–µ–∫
/change - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
/refresh - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ—Ñ–∏–ª—è
                                    """.format(name_of_state,len(dbm.get_list_interested_users(dbm.get_id_by_tg_id(update.message.from_user.username)))))
    
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    random_profile = dbm.get_random_user(dbm.get_interested_in_gender_by_tg_id(update.message.from_user.username))
    reply_keyboard = [["üö™","üíò","üö´"]]
    if update.message.text == "üíò":
        if dbm.check_upvote(dbm.get_id_by_tg_id(update.message.from_user.username),dbm.get_current_user_by_tg_id(update.message.from_user.username)) == 0:
            dbm.upvote(dbm.get_id_by_tg_id(update.message.from_user.username),dbm.get_current_user_by_tg_id(update.message.from_user.username))
    await send_profile(update,context,random_profile[0][2],random_profile[0][3],random_profile[0][0],reply_keyboard)
    # await update.message.reply_text(dn.formated_profile(random_profile[0][2], random_profile[0][3]),
    #                                 reply_markup=ReplyKeyboardMarkup(reply_keyboard,one_time_keyboard=True))
    dbm.update_current_user(update.message.from_user.username,random_profile[0][0])
    return SEARCH

async def interested(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    interested_users = dbm.get_list_interested_users(dbm.get_id_by_tg_id(update.message.from_user.username))
    if len(interested_users) == 0:
        await update.message.reply_text("–ü—Ä–æ—Å—Ç–∏, –Ω–æ —Ç—ã –Ω–∏–∫–æ–º—É –Ω–µ –Ω—É–∂–µ–Ω(",)
        await main_menu(update, context)
        return ConversationHandler.END
    reply_keyboard = [["üö™","üíò","üö´"]]
    if update.message.text == "üíò":
        await update.message.reply_text(
            "–£—Ö—É —ç—Ç–æ match, –≤—Ä–µ–º—è –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ–º—É —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫—É @{}".format(
                dbm.get_tg_id_by_id(dbm.get_current_user_by_tg_id(update.message.from_user.username))
                )
            )
        dbm.delete_upvote(dbm.get_current_user_by_tg_id(update.message.from_user.username),dbm.get_id_by_tg_id(update.message.from_user.username))
    elif update.message.text == "üö´":
        dbm.delete_upvote(dbm.get_current_user_by_tg_id(update.message.from_user.username),dbm.get_id_by_tg_id(update.message.from_user.username))
        
    interested_users = dbm.get_list_interested_users(dbm.get_id_by_tg_id(update.message.from_user.username))
    if len(interested_users) == 0:
        await update.message.reply_text("–§–∞–Ω–∞—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, —Å–º–∏—Ä–∏—Å—å")
        await main_menu(update, context)
        return ConversationHandler.END
    
    await send_profile(update,context,interested_users[0][4],interested_users[0][5],interested_users[0][0],reply_keyboard)
    dbm.update_current_user(update.message.from_user.username,interested_users[0][0])
    return INTERESTED

async def change_interested(update:Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [["‚ôÇÔ∏è","‚ôÄÔ∏è","‚ößÔ∏è"]]
    if update.message.text == "‚ôÇÔ∏è":
        dbm.update_interested_in_gender(update.message.from_user.username, "M")
        await main_menu(update,context)
        return ConversationHandler.END
    elif update.message.text == "‚ôÄÔ∏è":
        dbm.update_interested_in_gender(update.message.from_user.username, "F")
        await main_menu(update,context)
        return ConversationHandler.END
    elif update.message.text == "‚ößÔ∏è":
        dbm.update_interested_in_gender(update.message.from_user.username, "A")
        await main_menu(update,context)
        return ConversationHandler.END
    await update.message.reply_text("–ö–æ–≥–æ —Ç—ã —É–∂–µ –ø–æ–¥—ã—Å–∫–∞—Ç—å —Å–æ–±—Ä–∞–ª—Å—è?",
                            reply_markup=ReplyKeyboardMarkup(reply_keyboard,one_time_keyboard=True))
    return CHANGE

# SETTINGS --------------------------------------------------------------------------------

SETTINGS,NAME, BIO, PHOTO, GENDER = range(5)

async def void_settings(update:Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [["–ò–º—è","–û–ø–∏—Å–∞–Ω–∏–µ"],["–§–æ—Ç–æ","–ì–µ–Ω–¥–µ—Ä"],["–í—ã–π—Ç–∏"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é –ø–µ–Ω–µ—Ç—Ä–∞—Ü–∏—é –º—ã –ø—Ä–æ–≤–æ–¥–∏–º–∞",
                            reply_markup=ReplyKeyboardMarkup(reply_keyboard,one_time_keyboard=True))
    return SETTINGS

async def settings(update:Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [["–ò–º—è","–û–ø–∏—Å–∞–Ω–∏–µ"],["–§–æ—Ç–æ","–ì–µ–Ω–¥–µ—Ä"],["–í—ã–π—Ç–∏"]]
    if update.message.text == "–ò–º—è":
        await update.message.reply_text("–ö–∞–∫–æ–≤–æ —Ç–≤–æ–µ –∏–º—è?")
        return NAME
    elif update.message.text == "–û–ø–∏—Å–∞–Ω–∏–µ":
        await update.message.reply_text("–ò —Ç–µ–ø–µ—Ä—å —á–µ–º —Ç—ã –∏–∑–≤–µ—Å—Ç–µ–Ω?")
        return BIO
    elif update.message.text == "–§–æ—Ç–æ":
        await update.message.reply_text("–ö–∏–¥–∞–π —Ñ–æ—Ç–æ—á–∫—É –º–Ω–µ –≤ –∫–æ–ª–µ–∫—Ü–∏—é")
        return PHOTO
    elif update.message.text == "–ì–µ–Ω–¥–µ—Ä":
        reply_keyboard = [["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]]
        await update.message.reply_text("–ö–¢–û –¢–´ –ü–û –ì–ï–ù–î–ï–†–£!?",reply_markup=ReplyKeyboardMarkup(reply_keyboard,one_time_keyboard=True,input_field_placeholder="–ú—É–∂—á–∏–Ω–∞ –∏–ª–∏ –ñ–µ–Ω—â–∏–Ω–∞?"))
        return GENDER
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é –ø–µ–Ω–µ—Ç—Ä–∞—Ü–∏—é –º—ã –ø—Ä–æ–≤–æ–¥–∏–º–∞",
                            reply_markup=ReplyKeyboardMarkup(reply_keyboard,one_time_keyboard=True))
    return SETTINGS

async def change_name(update:Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if len(update.message.text) > 20:
        await update.message.reply_text("–Ø –∫–æ–Ω–µ—á–Ω–æ –Ω–µ –æ—Å—É–∂–¥–∞—é —Ç–≤–æ–µ –∏–º—è, –Ω–æ —á–µ—Ç –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ, –ª–∏–º–∏—Ç 20 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        return NAME
    dbm.update_name(update.message.from_user.username,update.message.text)
    await void_settings(update,context)
    return SETTINGS

async def change_bio(update:Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if len(update.message.text) > 100:
        await update.message.reply_text("–í–Ω—É—à–∏—Ç–µ–ª—å–Ω–æ, –æ–¥–Ω–∞–∫–æ –¥–∞–≤–∞–π —É–ª–æ–∂–∏–º—Å—è –≤ 100 —Å–∏–º–≤–æ–ª–æ–≤")
        return BIO
    dbm.update_bio(update.message.from_user.username,update.message.text)
    await void_settings(update,context)
    return SETTINGS

async def change_gender(update:Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if (update.message.text == "–ú—É–∂—á–∏–Ω–∞"):
        dbm.update_gender(update.message.from_user.username,'M')
    if (update.message.text == "–ñ–µ–Ω—â–∏–Ω–∞"):
        dbm.update_gender(update.message.from_user.username,'F')
    await void_settings(update,context)
    return SETTINGS

async def change_photo(update:Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    file = await update.message.photo[len(update.message.photo)-1].get_file()
    await file.download_to_drive("./photos/{}.jpg".format(update.message.from_user.username))
    await void_settings(update,context)
    return SETTINGS

def main() -> None:
    application = Application.builder().token("7521993568:AAGbrKztgd-nj9hP4He3IlqIKWKwolRjix0").build()
    status = dbm.connect_to_database()
    if (status):
        print("Something went wrong with db.")
        return -1

    register_from_heandler = ConversationHandler(
        entry_points=[MessageHandler(filters.ALL, start),CommandHandler("start", start)],
        states={
            START: [CommandHandler("start", start)],
            ENTERING_NAME: [MessageHandler(filters.TEXT,entering_name)],
            ENTER_GENDER: [MessageHandler(filters.Regex("^(–ú—É–∂—á–∏–Ω–∞|–ñ–µ–Ω—â–∏–Ω–∞)$"),entering_gender)],
            ENTERING_BIO: [MessageHandler(filters.TEXT,entering_bio)],
            ENTERING_PHOTO: [MessageHandler(filters.PHOTO, entering_photo)]
        },
        fallbacks=[CommandHandler("cancel",start)]
    )
    main_menu_heandler = CommandHandler("refresh", main_menu)
    search_heandler = ConversationHandler(
        entry_points=[CommandHandler("search", search)],
        states={
            SEARCH: [MessageHandler(filters.Regex("^(üö´|üíò)$"), search)],
        },
        fallbacks=[MessageHandler(filters.Regex("^(üö™)$"),start)]
    )

    interested_heandler = ConversationHandler(
        entry_points=[CommandHandler("interested", interested)],
        states={
            INTERESTED: [MessageHandler(filters.Regex("^(üö´|üíò)$"), interested)],
        },
        fallbacks=[MessageHandler(filters.Regex("^(üö™)$"),start)]
    )

    change_interested_heandler = ConversationHandler(
        entry_points=[CommandHandler("change", change_interested)],
        states={
            CHANGE: [MessageHandler(filters.Regex("^(‚ôÇÔ∏è|‚ôÄÔ∏è|‚ößÔ∏è)$"), change_interested)],
        },
        fallbacks=[MessageHandler(filters.Regex("^(üö™)$"),start)]
    )

    settings_heandler = ConversationHandler(
        entry_points=[CommandHandler("settings", settings)],
        states={
            SETTINGS:[MessageHandler(filters.Regex("^(–ò–º—è|–û–ø–∏—Å–∞–Ω–∏–µ|–§–æ—Ç–æ|–ì–µ–Ω–¥–µ—Ä)$"), settings)],
            NAME: [MessageHandler(filters.ALL, change_name)],
            BIO: [MessageHandler(filters.ALL, change_bio)],
            GENDER: [MessageHandler(filters.Regex("^(–ú—É–∂—á–∏–Ω–∞|–ñ–µ–Ω—â–∏–Ω–∞)$"), change_gender)],
            PHOTO: [MessageHandler(filters.PHOTO, change_photo)]
        },
        fallbacks=[MessageHandler(filters.Regex("^(–í—ã–π—Ç–∏)$"),start)]
    )

    application.add_handler(settings_heandler)
    application.add_handler(search_heandler)
    application.add_handler(change_interested_heandler)
    application.add_handler(interested_heandler)
    application.add_handler(main_menu_heandler)
    application.add_handler(register_from_heandler)

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()